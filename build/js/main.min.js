/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([0,"vendor"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./conguest.db.json":
/*!**************************!*\
  !*** ./conguest.db.json ***!
  \**************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, default */
/***/ (function(module) {

module.exports = JSON.parse("[{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":12700,\"vendor\":1,\"relevantIndex\":8,\"isNew\":true,\"img\":{\"desktop\":\"img/items/techne-1\",\"tablet\":\"img/items/tablet/techne-1--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":12700,\"vendor\":2,\"relevantIndex\":5,\"isNew\":false,\"img\":{\"desktop\":\"img/items/techne-2\",\"tablet\":\"img/items/tablet/techne-2--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":15700,\"vendor\":3,\"relevantIndex\":3,\"isNew\":true,\"img\":{\"desktop\":\"img/items/techne-3\",\"tablet\":\"img/items/tablet/techne-3--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":15700,\"vendor\":4,\"relevantIndex\":3,\"isNew\":true,\"img\":{\"desktop\":\"img/items/techne-4\",\"tablet\":\"img/items/tablet/techne-4--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":18500,\"vendor\":5,\"relevantIndex\":7,\"isNew\":true,\"img\":{\"desktop\":\"img/items/techne-5\",\"tablet\":\"img/items/tablet/techne-5--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":24700,\"vendor\":6,\"relevantIndex\":2,\"isNew\":false,\"img\":{\"desktop\":\"img/items/techne-6\",\"tablet\":\"img/items/tablet/techne-6--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":14500,\"vendor\":7,\"relevantIndex\":1,\"isNew\":true,\"img\":{\"desktop\":\"img/items/techne-7\",\"tablet\":\"img/items/tablet/techne-7--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":30500,\"vendor\":8,\"relevantIndex\":0,\"isNew\":false,\"img\":{\"desktop\":\"img/items/techne-9\",\"tablet\":\"img/items/tablet/techne-9--tablet\",\"alt\":\"Часы Techne\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"rado\",\"price\":22000,\"vendor\":9,\"relevantIndex\":0,\"isNew\":false,\"img\":{\"desktop\":\"img/items/rado-1\",\"tablet\":\"img/items/tablet/rado-1--tablet\",\"alt\":\"Часы Rado\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":16500,\"vendor\":10,\"relevantIndex\":0,\"isNew\":false,\"img\":{\"desktop\":\"img/items/rado-2\",\"tablet\":\"img/items/tablet/rado-2--tablet\",\"alt\":\"Часы Rado\"}},{\"type\":\"watch\",\"name\":null,\"brand\":\"techne\",\"price\":70500,\"vendor\":11,\"relevantIndex\":0,\"isNew\":true,\"img\":{\"desktop\":\"img/items/bulgari-1\",\"tablet\":\"img/items/tablet/bulgari-1--tablet\",\"alt\":\"Часы Rado\"}},{\"type\":\"band\",\"name\":null,\"brand\":\"band-george-jensen\",\"price\":6500,\"vendor\":12,\"relevantIndex\":0,\"isNew\":false,\"img\":{\"desktop\":\"img/bands/band-george-jensen\",\"tablet\":\"img/items/tablet/band-george-jensen\",\"alt\":\"Ремень для часов Georg Jensen\"}},{\"type\":\"band\",\"name\":null,\"brand\":\"nato\",\"price\":3200,\"vendor\":13,\"relevantIndex\":1,\"isNew\":true,\"img\":{\"desktop\":\"img/bands/band-nato\",\"tablet\":\"img/items/tablet/band-nato\",\"alt\":\"Ремень для часов Nato\"}},{\"type\":\"band\",\"name\":null,\"brand\":\"nato\",\"price\":5400,\"vendor\":14,\"relevantIndex\":0,\"isNew\":false,\"img\":{\"desktop\":\"img/bands/band-spark\",\"tablet\":\"img/items/tablet/band-spark\",\"alt\":\"Ремень для часов Spark\"}}]");

/***/ }),

/***/ "./source/components/js/accordion.js":
/*!*******************************************!*\
  !*** ./source/components/js/accordion.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_main_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/main/utils */ "./source/js/main/utils.js");
 // import webAnimations from 'web-animations-js';

const footerAccordionHeaders = document.querySelectorAll('.accordion__button--footer');
const filtersAccordionHeaders = document.querySelectorAll('.accordion__button--filters');
const mobile = window.matchMedia('(max-width: 530px)'); //Функция инициализации аккордеона

const accordionInit = (controls, media = false) => {
  Array.prototype.forEach.call(controls, accordionHeader => {
    let target = accordionHeader.parentElement.nextElementSibling;

    if (media) {
      const mobileAccordionChecker = () => {
        if (mobile.matches === true) {
          accordionHeader.setAttribute('aria-expanded', false);
        } else {
          accordionHeader.removeAttribute('aria-expanded');
        }
      };

      mobile.addListener(mobileAccordionChecker);
      mobileAccordionChecker();
    }

    const onClickControlAccordion = evt => {
      Object(_js_main_utils__WEBPACK_IMPORTED_MODULE_0__["setExpanded"])(evt.target);
      target.classList.toggle('accordion__panel--expanded'); // * Анимация аккордеона

      target.animate([{
        transformOrigin: 'top left',
        transform: "scaleY(0)"
      }, {
        transformOrigin: 'top left',
        transform: "scaleY(1)"
      }], {
        duration: 125,
        easing: 'ease-in-out',
        fill: 'both'
      });
    };

    accordionHeader.addEventListener('click', evt => {
      onClickControlAccordion(evt);
    });
  });
}; // Инициализация аккордеона для блока footer


accordionInit(footerAccordionHeaders, mobile); // Инициализация аккордеона для блока filters

accordionInit(filtersAccordionHeaders);

/***/ }),

/***/ "./source/components/js/cart.js":
/*!**************************************!*\
  !*** ./source/components/js/cart.js ***!
  \**************************************/
/*! exports provided: cart */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cart", function() { return cart; });
/* harmony import */ var _js_main_class_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/main/class.js */ "./source/js/main/class.js");
/* harmony import */ var _js_main_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../js/main/utils.js */ "./source/js/main/utils.js");

 // Пары товар - артикул

const cartItemsToVendors = new Map();
const cartItemTemplate = document.querySelector('#cart-item').content.querySelector('.cart__item'); // Класс для создания объектов в избранном

class CartItem extends _js_main_class_js__WEBPACK_IMPORTED_MODULE_0__["Item"] {
  constructor(params) {
    super(params);
    this.amount = params.amount;
  } // Метод создающий элементы


  create(itemTemplate, nameSelector, priceSelector, imgSelector) {
    let newItem = itemTemplate.cloneNode(true);
    let newName = newItem.querySelector(nameSelector);
    let newPrice = newItem.querySelector(priceSelector);
    let newImg = newItem.querySelector(imgSelector);
    newName.textContent = this.name;
    newPrice.textContent = this.price;
    newImg.appendChild(this.image);
    this.$layout = newItem;
    newItem.dataset.vendor = this.vendor;
    return newItem;
  } // Подсчет общего количества добавленных товаров


  toCount() {
    const totalCountField = document.querySelector('#total-count');
    totalCountField.value = Cart.countTotal();
    totalCountField.dispatchEvent(new Event('input', {
      bubbles: true
    }));
    return totalCountField.value;
  }

  increaseAmount() {
    this.amount += 1;
    return this.amount;
  }

  decreaseAmount() {
    this.amount -= 1;
    return this.amount;
  } // Вывод количества товаров в соответствующий элемент


  initAmountBox() {
    const amountBox = this.$layout.querySelector('.cart__count-input');
    amountBox.value = this.amount;
    return amountBox;
  } // Метод назначающий все обработчики


  bindAll() {
    const plusButton = this.$layout.querySelector('.cart__count-btn--plus');
    const minusButton = this.$layout.querySelector('.cart__count-btn--minus');
    const deleteToggle = this.$layout.querySelector('.cart__delete');
    const currentItem = deleteToggle.parentNode.parentNode;

    const deleteToggleClickHandler = () => {
      for (let [key, value] of cartItemsToVendors) {
        if (value === currentItem.dataset.vendor) {
          cartItemsToVendors.delete(key);
        }
      }

      this.amount = 0;
      currentItem.remove();
      Cart.sumTotal();
      this.toCount();
      return;
    };

    const minusBtnClickHandler = () => {
      if (this.amount >= 1) this.decreaseAmount();
      if (this.amount === 0) deleteToggleClickHandler();
      this.initAmountBox();
      Cart.sumTotal();
      this.toCount();
      return this.amount;
    };

    plusButton.addEventListener('click', () => {
      this.increaseAmount();
      this.initAmountBox();
      Cart.sumTotal();
      this.toCount();
    });
    minusButton.addEventListener('click', minusBtnClickHandler);
    deleteToggle.addEventListener('click', deleteToggleClickHandler);
  }

  init() {
    this.initAmountBox();
    this.bindAll();
  }

}

class Cart extends _js_main_class_js__WEBPACK_IMPORTED_MODULE_0__["Counter"] {
  constructor(params) {
    super(params);
    this.cartContainer = document.querySelector(params.cartContainerSelector);
    this.cartToggle = document.querySelector(params.cartToggleSelector);
    this.counterContainer = document.querySelector(params.counterSelector);
  } // Возвращает коллекцию всех добавленных элементов


  collectItems() {
    const cartItems = document.querySelectorAll('.cart__item');
    return cartItems;
  } // Показ подсказки


  displayCartTip() {
    const addedItems = this.collectItems();
    const tip = document.querySelector('.cart__tip');
    if (addedItems.length > 0) tip.classList.add('cart__tip--hidden');
    if (addedItems.length === 0) tip.classList.remove('cart__tip--hidden');
    return tip;
  } // Cоздание и добавление товара в корзину


  dropCartItem(ctx, amount, template, container) {
    const cartItem = new CartItem({
      name: ctx.querySelector('.catalog__brand').textContent,
      price: ctx.querySelector('.catalog__price').textContent,
      image: ctx.querySelector('.catalog__image').cloneNode(true),
      vendor: ctx.dataset.vendor,
      amount: amount
    });
    cartItem.create(template, '.cart__name', '.cart__price-tag', '.cart__media');
    cartItem.$layout.querySelector('.catalog__image').style.height = '100%';
    cartItem.add(container);
    cartItem.init();
    Cart.sumTotal();
    cartItemsToVendors.set(cartItem, cartItem.vendor);
    return cartItem;
  } // Поиск дублирующихся товаров


  findDuplicate(vendor) {
    let duplicate = null;

    for (let [key, value] of cartItemsToVendors) {
      if (value === vendor) {
        duplicate = key;
      }
    }

    return duplicate;
  }

  bindMenu() {
    const totalCountField = document.querySelector('#total-count');
    const closeCartBtn = document.querySelector('.cart__close-btn');
    const overlay = document.querySelector('.overlay'); // *  Функция обработчик по нажатию на кнопку корзины в меню

    const cartToggleClickHandler = () => {
      const overlay = document.querySelector('.overlay');
      overlay.classList.toggle('overlay--shown');
      this.cartContainer.classList.toggle('cart--shown');
      this.displayCartTip();
    }; // Функция закрытия корзины по клику вне окна


    const onDocumentClickCloseCart = evt => {
      const cartBox = document.querySelector('.cart');
      if (!cartBox.contains(evt.target)) Object(_js_main_utils_js__WEBPACK_IMPORTED_MODULE_1__["removeActiveClass"])(overlay, 'overlay--shown');
    }; // Закрытие корзины по клику на оверлей


    closeCartBtn.addEventListener('click', () => {
      Object(_js_main_utils_js__WEBPACK_IMPORTED_MODULE_1__["removeActiveClass"])(overlay, 'overlay--shown');
    });
    totalCountField.addEventListener('input', () => {
      this.count = totalCountField.value;
      this.initCounter();
    });
    this.cartToggle.addEventListener('click', cartToggleClickHandler, false);
    document.addEventListener('mouseup', onDocumentClickCloseCart);
    return this;
  }

  bindItems() {
    const cartBtns = document.querySelectorAll('.cart-btn'); // ! Функция обработчик по нажатию на кнопку добавления в корзину

    const cartBtnClickHandler = evt => {
      let itemTemplate = cartItemTemplate.cloneNode(true);
      const targetItem = evt.target.closest('.catalog__item');
      const targetVendor = targetItem.dataset.vendor;
      const cartList = document.querySelector('.cart__list');
      const duplicate = this.findDuplicate(targetVendor); // Если товара еще нет в корзине то добавляем его

      if (!duplicate) this.dropCartItem(targetItem, 1, itemTemplate, cartList);

      if (duplicate) {
        duplicate.amount++;
        duplicate.initAmountBox();
      }

      Cart.countTotal(); // Cчетчик добавленных товаров

      this.increaseCount();
      this.showCounter();
      return cartList;
    };

    cartBtns.forEach(btn => {
      btn.addEventListener('click', cartBtnClickHandler);
    });
    return this.cartContainer;
  }

  bindAll() {
    this.bindMenu();
    this.bindItems();
  }

  init() {
    this.displayCartTip();
    this.bindAll();
  } // Метод вычисляющий сумму всех товаров в корзине


  static sumTotal() {
    const defaultCurrency = ' ₽';
    const priceTags = document.querySelectorAll('.cart__price-tag');
    const priceBox = document.querySelector('#total-price');
    const prices = [];

    if (priceTags && priceTags.length != 0) {
      priceTags.forEach(tag => {
        let amountField = tag.nextElementSibling.nextElementSibling.querySelector('.cart__count-input');
        let price = tag.textContent.split(' ');
        let newPrice = amountField.value * price[0];
        prices.push(newPrice);
      });
      const sumAll = prices.reduce((a, b) => {
        return +a + +b;
      });
      const totalSum = sumAll + defaultCurrency;
      priceBox.textContent = totalSum;
      return priceBox;
    }

    priceBox.textContent = 0 + defaultCurrency;
    return priceBox;
  } // Метод вычисляющий количество всех товаров в корзине


  static countTotal() {
    let items = [...cartItemsToVendors.keys()];
    let amounts = items.map(item => item.amount);

    if (amounts.length != 0) {
      const totalCount = amounts.reduce((a, b) => {
        return a + b;
      });
      return totalCount;
    }

    return 0;
  }

}

const cart = new Cart({
  count: 0,
  counterSelector: '#cart-counter',
  cartContainerSelector: '.cart',
  cartToggleSelector: '#cart-toggle'
});


/***/ }),

/***/ "./source/components/js/favorites.js":
/*!*******************************************!*\
  !*** ./source/components/js/favorites.js ***!
  \*******************************************/
/*! exports provided: favorites */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "favorites", function() { return favorites; });
/* harmony import */ var _js_main_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/main/utils.js */ "./source/js/main/utils.js");
/* harmony import */ var _js_main_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../js/main/class.js */ "./source/js/main/class.js");



const favoriteItemTemplate = document.querySelector('#favorites-item').content.querySelector('.favorites__item'); // ! Класс для создания объектов в избранном

class FavoriteItem extends _js_main_class_js__WEBPACK_IMPORTED_MODULE_1__["Item"] {
  constructor(params) {
    super(params);
    this.counterField = document.querySelector('#favorites-counter');
  } // Метод создающий избранные элементы


  create(itemTemplate, nameSelector, priceSelector, imgSelector) {
    let newItem = itemTemplate.cloneNode(true);
    let newName = newItem.querySelector(nameSelector);
    let newPrice = newItem.querySelector(priceSelector);
    let newImg = newItem.querySelector(imgSelector);
    newName.textContent = this.name;
    newPrice.textContent = this.price;
    newImg.appendChild(this.image);
    this.$layout = newItem;
    newItem.dataset.vendor = this.vendor;
    return newItem;
  } // Метод назначаюший все обработчики


  bindAll() {
    const deleteToggle = this.$layout.querySelector('#delete-btn');
    const sourceItem = document.querySelector("li[data-vendor='".concat(this.vendor, "']"));
    const favoritesCounter = document.querySelector('#favorites-counter');
    const likeBtn = sourceItem.querySelector('.like-btn');
    deleteToggle.addEventListener('click', () => {
      likeBtn.classList.remove('like-btn--active');
      deleteToggle.parentNode.remove();
      if (favoritesCounter.value !== 0) favoritesCounter.value--;
      favoritesCounter.dispatchEvent(new Event('input', {
        bubbles: true
      }));
      return favoritesCounter;
    });
  }

}

class Favorites extends _js_main_class_js__WEBPACK_IMPORTED_MODULE_1__["Counter"] {
  constructor(params) {
    super(params);
    this.container = document.querySelector('.favorites');
    this.counterField = document.querySelector('#favorites-counter');
  } // Функции увеличения и показа количества товаров в избранном


  increaseLikes() {
    this.increaseCount();
    this.counterField.value = this.count;
    this.showCounter();
    return this.count;
  }

  decreaseLikes() {
    this.decreaseCount();
    this.counterField.value = this.count;
    if (this.count === 0) this.hide();
    return this.count;
  }

  collectItems() {
    const addedItems = document.querySelectorAll('.favorites__item');
    return addedItems;
  } // Функция показа подсказки


  displayFavoritesTip() {
    const items = this.collectItems();
    const tip = document.querySelector('.favorites__tip');
    if (items.length > 0) tip.classList.add('favorites__tip--hidden');
    if (items.length === 0) tip.classList.remove('favorites__tip--hidden');
    return tip;
  }

  bindToggle() {
    const favoritesBtn = document.querySelector('#favorites'); // !  Функция обработчик по нажатию на кнопку избранного в меню

    const onFavBtnClickToggleModal = () => {
      this.displayFavoritesTip();
      this.container.classList.toggle('favorites--shown');
      return this.container;
    }; // Функция закрытия избранного по клику вне окна


    const onDocumentClickCloseFavorites = evt => {
      const favorites = document.querySelector('.favorites');
      if (!favorites.contains(evt.target) && !evt.target.parentNode.classList.contains('like-btn') && !evt.target.parentNode.classList.contains('page-header__link')) Object(_js_main_utils_js__WEBPACK_IMPORTED_MODULE_0__["removeActiveClass"])(favorites, 'favorites--shown');
    };

    favoritesBtn.removeEventListener('click', onFavBtnClickToggleModal, false);
    favoritesBtn.addEventListener('click', onFavBtnClickToggleModal, false);
    document.addEventListener('mouseup', onDocumentClickCloseFavorites);
    return favoritesBtn;
  }

  bindItemBtn() {
    const likeBtns = document.querySelectorAll('.like-btn');
    const favoritesCounter = document.querySelector('#favorites-counter');

    const favoritesCounterInputHandler = () => {
      this.count = this.counterField.value;
      this.initCounter();
      if (this.count === 0) this.hideCounter();
    }; // ! Функция обработчик по нажатию на кнопку лайк


    const likeBtnClickHandler = evt => {
      let itemTemplate = favoriteItemTemplate.cloneNode(true);
      let likeBtn = evt.target.closest('.like-btn');
      const targetItem = evt.target.closest('.catalog__item');
      const targetVendor = targetItem.dataset.vendor;
      const favoritesList = document.querySelector('.favorites__list');
      const addedItems = this.collectItems();
      if (likeBtn) likeBtn.classList.toggle('like-btn--active'); // Если элемента еще нет в избранном и кнопка содержит активный класс

      if (!attrAvailabilityCheck(addedItems, targetVendor) && likeBtn.classList.contains('like-btn--active')) {
        // Создаем небходимый объект
        const favoriteItem = new FavoriteItem({
          name: targetItem.querySelector('.catalog__brand').textContent,
          price: targetItem.querySelector('.catalog__price').textContent,
          image: targetItem.querySelector('.catalog__image').cloneNode(true),
          vendor: targetItem.dataset.vendor
        });
        favoriteItem.create(itemTemplate, '.favorites__name', '.favorites__price', '.favorites__media');
        favoriteItem.add(favoritesList);
        favoriteItem.bindAll();
        favoritesCounter.value++;
        this.increaseLikes();
        this.initCounter();
      } // Если у кнопки удален активный класс удаляем соответствующмй элемент


      if (!likeBtn.classList.contains('like-btn--active')) {
        // Ищем и удаляем из избранного элемент соответвующий кнопке
        const addedVendors = [];
        addedItems.forEach(item => {
          addedVendors.push(item.dataset.vendor);
        });
        const deletedIndex = findIndexByVendor(addedVendors, targetVendor);
        addedItems[deletedIndex].remove();
        this.decreaseLikes();
        this.initCounter();
      }

      return favoritesList;
    };

    this.displayFavoritesTip();
    this.counterField.addEventListener('input', favoritesCounterInputHandler);
    likeBtns.forEach(btn => {
      btn.addEventListener('click', likeBtnClickHandler);
    });
    return likeBtns;
  }

  bindAll() {
    this.bindToggle();
    this.bindItemBtn();
    return this;
  }

} // Функция вычисляющая положение блока "избранное"


const calcFavorites = () => {
  let root = document.documentElement;
  let headerHeight = document.querySelector('.page-header').getBoundingClientRect().height;
  root.style.setProperty('--favoritesTop', headerHeight + 'px');
}; // Функция проверки на наличие товара в избранном по артикулу


const attrAvailabilityCheck = (arr, value) => {
  const vendors = [];
  arr.forEach(el => {
    if (el.dataset.vendor == value) {
      vendors.push(el);
    }
  });
  return vendors.length;
}; // Функция поиска товара в избранном по артикулу


const findIndexByVendor = (vendorsArray, vendor) => {
  return vendorsArray.indexOf(vendor);
};

const favorites = new Favorites({
  count: 0,
  counterSelector: '#likes-counter'
}); // Вычисление положения блока "Избранное" при изменениях в браузере

window.addEventListener('load', calcFavorites, false);
window.addEventListener('resize', calcFavorites, false);


/***/ }),

/***/ "./source/components/js/menu.js":
/*!**************************************!*\
  !*** ./source/components/js/menu.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_main_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/main/utils */ "./source/js/main/utils.js");
/* harmony import */ var focus_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! focus-manager */ "./node_modules/focus-manager/focusManager.js");
/* harmony import */ var focus_manager__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(focus_manager__WEBPACK_IMPORTED_MODULE_1__);


const menuBtn = document.querySelector('.hamburger-btn');
const tablet = window.matchMedia('(max-width: 1139px)');

if (menuBtn) {
  // * Функция-обработчик нажатия на кнопку меню
  const onMenuBtnClickMenuToggle = () => {
    const menuList = document.querySelector('.menu__list');
    const menuContainer = document.querySelector('.menu__wrap');
    const userSection = document.querySelector('.page-header__user-section');
    let expanded = menuBtn.getAttribute('aria-expanded') === 'true' || false;
    menuBtn.setAttribute('aria-expanded', !expanded);
    menuBtn.classList.toggle('hamburger-btn--active');
    menuContainer.classList.toggle('menu__wrap--fullscreen');
    menuList.classList.toggle('menu__list--shown');
    userSection.classList.toggle('page-header__user-section--shifted');

    if (menuList.classList.contains('menu__list--shown')) {
      focus_manager__WEBPACK_IMPORTED_MODULE_1___default.a.capture(menuContainer);
      Object(_js_main_utils__WEBPACK_IMPORTED_MODULE_0__["disableWindowScroll"])();
    } else {
      focus_manager__WEBPACK_IMPORTED_MODULE_1___default.a.release(menuContainer);
      Object(_js_main_utils__WEBPACK_IMPORTED_MODULE_0__["enableWindowScroll"])();
    }
  };

  menuBtn.addEventListener('click', onMenuBtnClickMenuToggle);
}

/***/ }),

/***/ "./source/components/js/pagination.js":
/*!********************************************!*\
  !*** ./source/components/js/pagination.js ***!
  \********************************************/
/*! exports provided: PageInterface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageInterface", function() { return PageInterface; });
/* harmony import */ var _favorites_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./favorites.js */ "./source/components/js/favorites.js");
/* harmony import */ var _cart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cart.js */ "./source/components/js/cart.js");
/* harmony import */ var tui_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tui-pagination */ "./node_modules/tui-pagination/dist/tui-pagination.js");
/* harmony import */ var tui_pagination__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(tui_pagination__WEBPACK_IMPORTED_MODULE_2__);




class PageInterface {
  constructor(params) {
    this._dataBase = params.dataBase;
    this._renderCb = params.renderCb;
    this.productType = params.productType;
    this.pagingContainerClass = params.pagingContainerClass;
    this.itemsContainer = document.querySelector(params.itemsContainerClass);
    this.totalItems = params.totalItems;
    this.itemsPerPage = params.itemsPerPage;
    this.visiblePages = params.visiblePages;
    this.initialPage = params.initialPage;
    this.centerAlign = false;
    this.firstItemClass = params.firstItemClass;
    this.lastItemClass = params.lastItemClass;
    this.pageClass = params.pageClass;
    this.currentPageClass = params.currentPageClass;
    this.moveButtonClass = params.moveButtonClass;
    this.disabledMoveButtonClass = params.disabledMoveButtonClass;
    this.moreButtonClass = params.moreButtonClass;
    this.template = {
      page: "<li class=\"pagination__item\"><a href=\"#\" class=\"".concat(this.pageClass, "\">{{page}}</a></li>"),
      currentPage: '<li class="pagination__item"><strong class="pagination__link pagination__link--current" aria-current="true">{{page}}</strong></li>',
      moveButton: '<button class="pagination__btn pagination__btn--{{type}}"></button>',
      disabledMoveButton: '<span class="pagination__btn pagination__btn--{{type}} pagination__btn--disabled"></span>',
      moreButton: '<li class="pagination__item"><a href="#" class="pagination__link">...</a></li>'
    };
    this.$paging = '';
    this.currentPage = params.initialPage;
  }

  createPaging() {
    const pagination = new tui_pagination__WEBPACK_IMPORTED_MODULE_2___default.a(this.pagingContainerClass, {
      totalItems: this.totalItems,
      itemsPerPage: this.itemsPerPage,
      visiblePages: this.visiblePages,
      page: this.initialPage,
      centerAlign: this.centerAlign,
      firstItemClassName: this.firstItemClass,
      lastItemClassName: this.lastItemClass,
      template: this.template
    });
    return pagination;
  }

  bindPaging() {
    const paging = this.createPaging();
    this.$paging = paging;
    paging.on('beforeMove', () => {
      this.clear();
    });
    paging.on('afterMove', evt => {
      this.currentPage = evt.page;

      async function refreshPage() {
        await this.renderItems();
        _favorites_js__WEBPACK_IMPORTED_MODULE_0__["favorites"].bindItemBtn();
        _cart_js__WEBPACK_IMPORTED_MODULE_1__["cart"].bindItems();
        return this;
      }

      refreshPage.call(this);
    });
    return paging;
  }

  renderItems() {
    const indexIndent = 1;
    const targetPages = this.currentPage + this.itemsPerPage - indexIndent;

    const targetData = this._dataBase.slice(this.currentPage - indexIndent, targetPages);

    targetData.forEach(itemData => {
      return this._renderCb(itemData, this.itemsContainer, this.productType);
    });
    return this.itemsContainer;
  }

  init() {
    if (this.itemsContainer) {
      this.renderItems();

      if (this.pagingContainerClass) {
        this.bindPaging();
      }

      _cart_js__WEBPACK_IMPORTED_MODULE_1__["cart"].init();
      _favorites_js__WEBPACK_IMPORTED_MODULE_0__["favorites"].bindAll();
      return this.itemsContainer;
    }
  }

  clear() {
    this.itemsContainer.textContent = '';
  }

}



/***/ }),

/***/ "./source/components/js/range-slider.js":
/*!**********************************************!*\
  !*** ./source/components/js/range-slider.js ***!
  \**********************************************/
/*! exports provided: createRangeSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createRangeSlider", function() { return createRangeSlider; });
/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nouislider */ "./node_modules/nouislider/distribute/nouislider.js");
/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_0__);

const rangeSlider = document.querySelector('.filters__scale');

function createRangeSlider() {
  if (rangeSlider) {
    const slider = nouislider__WEBPACK_IMPORTED_MODULE_0___default.a.create(rangeSlider, {
      start: [12000, 90000],
      connect: true,
      step: 100,
      margin: 50000,
      range: {
        min: 0,
        max: 250000
      }
    });
    const handles = document.querySelectorAll('.noUi-handle');
    const range = document.querySelector('.noUi-connect'); // * Функция генерации подсказки

    const renderTip = handle => {
      let toolTip = document.createElement('span');
      toolTip.classList.add('noUi-tip');
      toolTip.textContent = Math.round(handle.getAttribute('aria-valuenow'));
      handle.appendChild(toolTip);
    }; // * Функция обновления подсказки при перетаскивании ползунка


    const onDragUpdateTip = () => {
      let newTips = document.querySelectorAll('.noUi-tip');
      const newHandles = document.querySelectorAll('.noUi-handle');
      newTips.forEach(function (newTip, index) {
        newTip.textContent = Math.round(newHandles[index].getAttribute('aria-valuenow'));
      });
    }; // Создание подсказок


    handles.forEach(handle => {
      handle.style.cursor = 'pointer';
      renderTip(handle);
    }); // Обновление подсказок

    slider.on('update', onDragUpdateTip);
    return slider;
  }
}



/***/ }),

/***/ "./source/components/js/search.js":
/*!****************************************!*\
  !*** ./source/components/js/search.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_main_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../js/main/utils.js */ "./source/js/main/utils.js");

const searchForm = document.querySelector('.search');
const searchBtn = document.querySelector('#search-btn');
const searchField = document.querySelector('.search__field');
const headerLogo = document.querySelector('.page-header__logo-link');
const userSection = document.querySelector('.page-header__user-section');
const mobile = window.matchMedia('(max-width: 450px)');

const closeSearch = () => {
  if (searchField.classList.contains('search__field--expanded')) {
    searchField.classList.remove('search__field--expanded');
  }
}; // * Обработчик по нажатию на кнопку поиска


const onClickControlSearch = () => {
  let isFocused = document.activeElement === searchField;

  if (mobile.matches === true) {
    searchField.classList.toggle('search__field--expanded');
    headerLogo.classList.toggle('page-header__logo-link--collapsed');
    userSection.classList.toggle('page-header__user-section--expanded');
  } else {
    searchField.classList.toggle('search__field--expanded');
  }

  if (!isFocused) {
    searchField.focus();
  } else if (isFocused) {
    searchForm.submit();
  }
};

searchForm.addEventListener('submit', evt => {
  evt.preventDefault();
  closeSearch();
});
searchBtn.addEventListener('click', onClickControlSearch, false);
document.addEventListener('mouseup', evt => {
  if (!searchForm.contains(evt.target)) closeSearch();
});
window.addEventListener('keydown', evt => {
  Object(_js_main_utils_js__WEBPACK_IMPORTED_MODULE_0__["onEscEvent"])(evt, closeSearch);
});

/***/ }),

/***/ "./source/components/js/select.js":
/*!****************************************!*\
  !*** ./source/components/js/select.js ***!
  \****************************************/
/*! exports provided: Select */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return Select; });
const getTemplate = (data = [], placeholder, selectedId) => {
  let text = placeholder || 'Дефолтный текст';
  const items = data.map(item => {
    let selectedClass = '';

    if (item.id === selectedId) {
      text = item.value;
      selectedClass = 'selected';
    }

    return "\n    <li class=\"select__item\" aria-role=\"option\">\n      <button type=\"button\" class=\"select__btn ".concat(selectedClass, "\" data-type=\"item\" data-id=\"").concat(item.id, "\">\n        ").concat(item.value, "\n      </button>\n    </li>\n    ");
  });
  return "\n  <div class=\"select__backdrop\" data-type=\"backdrop\"></div>\n  <input class=\"visually-hidden\" data-type=\"trigger\" aria-hidden=\"true\" value=\"\"></input>\n  <button type=\"button\" id=\"select-input\" class=\"select__input\" data-type=\"input\" aria-controls=\"select-dropdown\" aria-current=\"true\">\n    <span data-type=\"value\">".concat(text, "</span>\n  </button>\n  <div id=\"select-dropdown\" class=\"select__dropdown\" aria-labelledby=\"select-input\" aria-expanded=\"false\">\n    <ul class=\"select__list\">\n      ").concat(items.join(''), "\n    </ul>\n  </div>");
};

class Select {
  constructor(selector, options) {
    this.$el = document.querySelector(selector);
    this.options = options;
    this.selectedId = options.selectedId;
    this.render();
    this.setup();
  }

  render() {
    const {
      placeholder,
      data
    } = this.options;
    this.$el.classList.add('select');
    this.$el.innerHTML = getTemplate(data, placeholder, this.selectedId);
  }

  setup() {
    this.clickHandler = this.clickHandler.bind(this);
    this.$el.addEventListener('click', this.clickHandler);
    this.$value = this.$el.querySelector('[data-type="value"]');
    this.$el.setAttribute('aria-role', 'select');
  }

  ally() {
    const dropdown = this.$el.querySelector('#select-dropdown');
    let isExpanded = dropdown.getAttribute('aria-expanded') === 'true' || false;
    dropdown.setAttribute('aria-expanded', !isExpanded);
  }

  clickHandler(evt) {
    const {
      type
    } = evt.target.dataset;

    if (type === 'input' || type === 'value') {
      this.toggle();
    } else if (type === 'item') {
      const id = evt.target.dataset.id;
      this.select(id);
    }

    if (type === 'backdrop') this.close();
    this.ally();
  }

  get isOpen() {
    return this.$el.classList.contains('open');
  }

  get current() {
    return this.options.data.find(item => item.id === this.selectedId);
  }

  select(id) {
    let trigger = this.$el.querySelector('[data-type="trigger"]');
    this.selectedId = id;
    this.$value.textContent = this.current.value;
    this.$el.querySelectorAll('[data-type="item"]').forEach(el => el.classList.remove('selected'));
    this.$el.querySelector("[data-id=\"".concat(id, "\"]")).classList.add('selected');
    trigger.setAttribute('value', this.current.value);
    trigger.dispatchEvent(new Event('input', {
      bubbles: true
    }));
    this.options.onSelect ? this.options.onSelect(this.current) : null;
    this.close();
  }

  toggle() {
    this.isOpen ? this.close() : this.open();
  }

  open() {
    this.$el.classList.add('open');
  }

  close() {
    this.$el.classList.remove('open');
  }

  destroy() {
    this.$el.removeEventListener('click', this.clickHandler);
    this.$el.innerHTML = '';
  }

}



/***/ }),

/***/ "./source/components/js/tabs.js":
/*!**************************************!*\
  !*** ./source/components/js/tabs.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// * Класс табов
class Tabs {
  constructor(dataClass, tabActiveClass, contentActiveClass) {
    this.dataClass = dataClass;
    this.tabActiveClass = tabActiveClass;
    this.contentActiveClass = contentActiveClass;
  } // * Метод отображающий начальное состояние табов


  init() {
    const menuElements = document.querySelectorAll(this.dataClass);
    menuElements.forEach(tabElement => {
      if (tabElement.classList.contains(this.tabActiveClass)) {
        // Находим id контента и назначаем ему активный класс и aria состояние
        const id = tabElement.dataset.tab;
        const tabContent = document.getElementById(id);
        tabContent.classList.add(this.contentActiveClass);
        const isHidden = tabContent.getAttribute('aria-hidden') === 'true' || false;
        tabContent.setAttribute('aria-hidden', !isHidden);
      }
    });
  } // * Метод назначающий обработчики всем переключателям табов


  bindAll() {
    const menuElements = document.querySelectorAll(this.dataClass);
    menuElements.forEach(tabElement => {
      tabElement.addEventListener('click', evt => {
        this.change(evt);
      }, false);
    });
  } // * Метод для очистки всех обработчиков


  clear() {
    const menuElements = document.querySelectorAll(this.dataClass);
    menuElements.forEach(tabElement => {
      tabElement.classList.remove(this.tabActiveClass);
      const id = tabElement.dataset.tab;
      document.getElementById(id).classList.remove(this.contentActiveClass);
    });
  } // * Метод смены отображаемого содержимого


  change(evt) {
    this.clear();
    evt.target.classList.add(this.tabActiveClass);
    const id = evt.currentTarget.dataset.tab;
    const tabContent = document.getElementById(id);
    tabContent.classList.add(this.contentActiveClass);
    const isHidden = tabContent.getAttribute('aria-hidden') === 'true' || false;
    tabContent.setAttribute('aria-hidden', !isHidden);
  }

}

const connectTabs = new Tabs('[data-tab]', 'tabs__link--active', 'tabs__content--active');
connectTabs.init();
connectTabs.bindAll();

/***/ }),

/***/ "./source/js/main.js":
/*!***************************!*\
  !*** ./source/js/main.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _main_sliders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main/sliders.js */ "./source/js/main/sliders.js");
/* harmony import */ var _main_backend_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main/backend.js */ "./source/js/main/backend.js");
/* harmony import */ var _main_factory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./main/factory.js */ "./source/js/main/factory.js");
/* harmony import */ var _main_navigation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./main/navigation.js */ "./source/js/main/navigation.js");
/* harmony import */ var _main_forms_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./main/forms.js */ "./source/js/main/forms.js");
/* harmony import */ var _main_forms_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_main_forms_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _main_modal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./main/modal.js */ "./source/js/main/modal.js");
/* harmony import */ var yall_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! yall-js */ "./node_modules/yall-js/src/yall.mjs");






 // ! Инициализация плагина yall-js

document.addEventListener('DOMContentLoaded', () => Object(yall_js__WEBPACK_IMPORTED_MODULE_6__["default"])({
  observeChanges: true,
  noPolyfill: true
}));

/***/ }),

/***/ "./source/js/main/backend.js":
/*!***********************************!*\
  !*** ./source/js/main/backend.js ***!
  \***********************************/
/*! exports provided: readDbRequest, readUrl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readDbRequest", function() { return readDbRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readUrl", function() { return readUrl; });
/* harmony import */ var _conguest_db_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../conguest.db.json */ "./conguest.db.json");
var _conguest_db_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../conguest.db.json */ "./conguest.db.json", 1);

const createUrl = 'https://api.jsonbin.io/b/';
const secretKey = '$2b$10$HuivVX41ooUZrHpYIU477.qlnAD.19SW.NTvQa1cuKcpwPyR0DiDe';
const dbId = '5f25d1e2dddf413f95ba4eff';
const readUrl = "".concat(createUrl).concat(dbId);

function createDbRequest(method, url, body = null) {
  const headers = {
    'Content-Type': 'application/json',
    'secret-key': secretKey
  };
  return fetch(url, {
    method: method,
    headers: headers,
    body: JSON.stringify(body)
  }).then(response => {
    if (response.ok) return response.json();
    return response.json().then(error => {
      const e = new Error("\u041E\u0448\u0438\u0431\u043A\u0430, \u043A\u043E\u0434 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F ".concat(response.status));
      e.data = error;
      throw e;
    });
  });
}

function readDbRequest(method, url) {
  const headers = {
    'Content-Type': 'application/json',
    'secret-key': secretKey
  };
  return fetch(url, {
    method: method,
    headers: headers
  }).then(response => {
    if (response.ok) return response.json();
    return response.json().then(error => {
      const e = new Error("\u041E\u0448\u0438\u0431\u043A\u0430, \u043A\u043E\u0434 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F ".concat(response.status));
      e.data = error;
      throw e;
    });
  });
}

async function getDbId() {
  const response = await createDbRequest('POST', createUrl, _conguest_db_json__WEBPACK_IMPORTED_MODULE_0__);
  return response.id;
}



/***/ }),

/***/ "./source/js/main/class.js":
/*!*********************************!*\
  !*** ./source/js/main/class.js ***!
  \*********************************/
/*! exports provided: Counter, Item */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Counter", function() { return Counter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Item", function() { return Item; });
class Counter {
  constructor(params) {
    this.count = params.count;
    this.$counterBox = document.querySelector(params.counterSelector);
  }

  showCounter() {
    if (this.count > 0) this.$counterBox.style.display = 'block';
  }

  hide() {
    if (this.count === 0) this.$counterBox.style.display = 'none';
  }

  increaseCount() {
    this.count++;
    this.initCounter();
    return this.count;
  }

  decreaseCount(value = 0) {
    if (value) {
      const result = this.count - value;
      this.count = result;
    } else if (this.count) {
      this.count--;
    }

    this.initCounter();
    return this.count;
  }

  initCounter() {
    if (this.count) {
      this.showCounter();
      this.$counterBox.dataset.counter = this.count;
    }

    this.hide();
  }

}

class Item {
  constructor(params) {
    this.type = params.type;
    this.name = params.name;
    this.brand = params.brand;
    this.price = params.price;
    this.image = params.image;
    this.vendor = params.vendor;
    this.$layout = null;
  }

  add(container) {
    if (this.$layout) container.appendChild(this.$layout);
    return container;
  }

  remove(toggle) {
    toggle.parentNode.remove();
    return;
  }

}



/***/ }),

/***/ "./source/js/main/factory.js":
/*!***********************************!*\
  !*** ./source/js/main/factory.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter.js */ "./source/js/main/filter.js");
/* harmony import */ var _class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./class.js */ "./source/js/main/class.js");
/* harmony import */ var _backend_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backend.js */ "./source/js/main/backend.js");
/* harmony import */ var _components_js_pagination_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/js/pagination.js */ "./source/components/js/pagination.js");




const catalogItemTemplate = document.querySelector('#catalog-item-template');
const eventsTrigger = document.querySelector('[data-type="trigger"]');

class CatalogItem extends _class_js__WEBPACK_IMPORTED_MODULE_1__["Item"] {
  constructor(params) {
    super(params);
    this.desktop = params.desktop, this.tablet = params.tablet, this.alt = params.alt;
  } // Метод создания единицы товара


  renderItem(productType) {
    if (catalogItemTemplate) if (this.type === productType) {
      const catalogItem = catalogItemTemplate.content.querySelector('.catalog__item').cloneNode(true);
      const currency = ' ₽';
      const itemBrand = catalogItem.querySelector('.catalog__brand');
      const itemPrice = catalogItem.querySelector('.catalog__price');
      const itemLink = catalogItem.querySelector('.catalog__link');
      const pictureTemplate = "\n      <picture class=\"catalog__media-wrap\">\n        <!-- Webp -->\n\n        <!-- Desktop -->\n        <source\n          media=\"(min-width: 1140px)\"\n          type=\"image/webp\"\n          srcset=\"img/placeholder.png\"\n          data-srcset=\"".concat(this.desktop, "@2x.webp 2x, ").concat(this.desktop, ".webp\"\n        >\n\n        <!-- Tablet -->\n        <source\n          type=\"image/webp\"\n          srcset=\"img/placeholder.png\"\n          data-srcset=\"").concat(this.tablet, "@2x.webp 2x, ").concat(this.tablet, ".webp\"\n        >\n        <!-- Png -->\n\n        <!-- Desktop -->\n        <source\n          media=\"(min-width: 1140px)\"\n          srcset=\"img/placeholder.png\"\n          data-srcset=\"").concat(this.desktop, "@2x.webp 2x, ").concat(this.desktop, ".png\"\n        >\n\n        <!-- Tablet -->\n        <img\n          style=\"height: 100%\"\n          class=\"catalog__image lazy\"\n          src=\"img/placeholder.png\"\n          data-srcset=\"").concat(this.tablet, "@2x.png 2x\"\n          data-src=\"").concat(this.tablet, ".png\"\n          alt=\"").concat(this.alt, "\"\n        >\n      </picture>");
      itemBrand.textContent = this.brand;
      itemPrice.textContent = this.price + currency;
      catalogItem.dataset.vendor = this.vendor;
      itemLink.insertAdjacentHTML('beforeend', pictureTemplate);
      this.$layout = catalogItem;
      return catalogItem;
    }
  }

}

const renderCatalogItem = (itemData, container, productType) => {
  const catalogFragment = document.createDocumentFragment();
  const catalogItem = new CatalogItem({
    type: itemData.type,
    brand: itemData.brand,
    price: itemData.price,
    vendor: itemData.vendor,
    desktop: itemData.img.desktop,
    tablet: itemData.img.tablet,
    alt: itemData.img.alt
  });
  catalogItem.renderItem(productType);
  catalogItem.add(catalogFragment);
  container.appendChild(catalogFragment);
  return container;
};

async function initCatalog() {
  const responceData = await Object(_backend_js__WEBPACK_IMPORTED_MODULE_2__["readDbRequest"])('GET', _backend_js__WEBPACK_IMPORTED_MODULE_2__["readUrl"]);
  const db = responceData.slice().sort(_filter_js__WEBPACK_IMPORTED_MODULE_0__["sortItems"]);

  const getTotalLength = type => {
    return db.map(item => item[type]);
  };

  const catalogOptions = {
    dataBase: db,
    renderCb: renderCatalogItem,
    productType: 'watch',
    pagingContainerClass: 'pagination',
    itemsContainerClass: '.catalog__list',
    totalItems: getTotalLength('watch'),
    itemsPerPage: 12,
    visiblePages: 6,
    initialPage: 1,
    centerAlign: false,
    firstItemClass: 'pagination__link--first-child',
    lastItemClass: 'pagination__link--last-child',
    pageClass: 'pagination__link',
    currentPageClass: 'pagination__link--current',
    moveButtonClass: 'pagination__btn',
    disabledMoveButtonClass: 'pagination__btn--disabled',
    moreButtonClass: 'pagination__link'
  };
  const catalogInterface = new _components_js_pagination_js__WEBPACK_IMPORTED_MODULE_3__["PageInterface"](catalogOptions);
  catalogInterface.clear();
  return catalogInterface.init(db, renderCatalogItem);
}

initCatalog();
eventsTrigger.addEventListener('input', () => {
  initCatalog();
});

/***/ }),

/***/ "./source/js/main/filter.js":
/*!**********************************!*\
  !*** ./source/js/main/filter.js ***!
  \**********************************/
/*! exports provided: select, sortItems, getSortOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return select; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortItems", function() { return sortItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSortOption", function() { return getSortOption; });
/* harmony import */ var _components_js_select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/js/select.js */ "./source/components/js/select.js");

const select = new _components_js_select_js__WEBPACK_IMPORTED_MODULE_0__["Select"]('#select', {
  placeholder: 'Choose the option',
  selectedId: '1',
  data: [{
    id: '1',
    value: 'По популярности'
  }, {
    id: '2',
    value: 'По цене'
  }, {
    id: '3',
    value: 'По новизне'
  }],

  onSelect(item) {
    return item.id;
  }

});

const getSortOption = item => {
  const idToItemValues = {
    '1': item.relevantIndex,
    '2': item.price,
    '3': item.isNew
  };
  return idToItemValues[select.current.id];
};

const sortItems = (a, b) => {
  let firstItem = getSortOption(a);
  let seconditem = getSortOption(b);
  return firstItem - seconditem;
};



/***/ }),

/***/ "./source/js/main/forms.js":
/*!*********************************!*\
  !*** ./source/js/main/forms.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

const filterForm = document.querySelector('#filter-form');
const colorButtons = document.querySelectorAll('.filters__color-btn');
const colorPicker = document.querySelector('#color-picker'); //Задание фонового цвета для кнопок

const setBgColor = toggle => toggle.style.backgroundColor = toggle.dataset.color; // Функция задающая передающая значение цвета инпуту


const setColorValue = toggle => {
  let color = colorPicker.value;
  color = toggle.dataset.color;
  return color;
}; // Обработчик по нажатию на кнопку цвета


const onColorBtnClickSetColor = (toggle, activeClass) => {
  toggle.classList.toggle(activeClass);
  setColorValue(toggle);
  setBgColor(toggle);
};

if (colorButtons) {
  colorButtons.forEach(btn => {
    if (btn.classList.contains('filters__color-btn--active')) {
      btn.classList.remove('filters__color-btn--active');
    }

    setBgColor(btn);
    btn.addEventListener('click', () => onColorBtnClickSetColor(btn, 'filters__color-btn--active'));
  });
}

if (filterForm) {
  const filterButtons = filterForm.querySelectorAll('button'); // Отменяет действие отправки по нажатию на кнопки в форме

  filterButtons.forEach(btn => {
    btn.addEventListener('click', evt => evt.preventDefault());
  });
}

/***/ }),

/***/ "./source/js/main/modal.js":
/*!*********************************!*\
  !*** ./source/js/main/modal.js ***!
  \*********************************/
/*! exports provided: createImage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createImage", function() { return createImage; });
/* harmony import */ var _main_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main/utils.js */ "./source/js/main/utils.js");

const cardLinks = document.querySelectorAll('.card__link');
const overlay = document.querySelector('.overlay'); // * Функция закрытия модального окна

const closeModalView = () => overlay.classList.contains('overlay--shown') ? overlay.classList.remove('overlay--shown') : null; // * Функция создания изображения


const createImage = (source, imgClass = 'modal-view__image') => {
  let image = document.createElement('img');
  image.src = source;
  image.classList.add(imgClass);
  return image;
}; // * Функция создания кнопки закрытия


const createCloseBtn = () => {
  let closeBtn = document.createElement('button');
  closeBtn.setAttribute('aria-label', 'Закрыть просмотр');
  closeBtn.classList.add('modal-view__close');
  return closeBtn;
}; // * Функция создания модального экрана с изображением


const createModalView = source => {
  const modalView = document.querySelector('.modal-view');
  let fragment = document.createDocumentFragment();
  modalView.innerHTML = '';
  fragment.appendChild(createImage(source));
  fragment.appendChild(createCloseBtn());
  modalView.appendChild(fragment);
}; // * Функция обработчик по клику на слайды


const onClickRenderView = evt => {
  let target = evt.target;

  if (target.classList.contains('card__image')) {
    const src = target.getAttribute('data-srcset');
    const path = src.split(' ')[0]; // Создание экрана просмотра

    createModalView(path);
    const closeModalBtn = document.querySelector('.modal-view__close');
    overlay.classList.add('overlay--shown');

    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModalView);
    }
  }
}; // * Назначение обработчиков для изображений


if (cardLinks) {
  cardLinks.forEach(link => {
    link.addEventListener('click', evt => {
      onClickRenderView(evt);
    }, true);
  });
}

window.addEventListener('keydown', evt => {
  Object(_main_utils_js__WEBPACK_IMPORTED_MODULE_0__["onEscEvent"])(evt, closeModalView);
});


/***/ }),

/***/ "./source/js/main/navigation.js":
/*!**************************************!*\
  !*** ./source/js/main/navigation.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_js_menu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/js/menu.js */ "./source/components/js/menu.js");
/* harmony import */ var _components_js_accordion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/js/accordion.js */ "./source/components/js/accordion.js");
/* harmony import */ var _components_js_search_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/js/search.js */ "./source/components/js/search.js");
/* harmony import */ var _components_js_tabs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/js/tabs.js */ "./source/components/js/tabs.js");
/* harmony import */ var _components_js_tabs_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_components_js_tabs_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _components_js_favorites_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/js/favorites.js */ "./source/components/js/favorites.js");
/* harmony import */ var _components_js_cart_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/js/cart.js */ "./source/components/js/cart.js");
/* harmony import */ var _components_js_pagination_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/js/pagination.js */ "./source/components/js/pagination.js");







const logoPicture = document.querySelector('.page-header__logo-picture');

const onKeyPressCancelTab = () => {
  if (logoPicture) {
    logoPicture.tabIndex = '-1';
  }
};

window.addEventListener('keydown', onKeyPressCancelTab);

/***/ }),

/***/ "./source/js/main/sliders.js":
/*!***********************************!*\
  !*** ./source/js/main/sliders.js ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var swiper_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper/core */ "./node_modules/swiper/swiper.esm.js");
/* harmony import */ var _components_js_range_slider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/js/range-slider.js */ "./source/components/js/range-slider.js");


const promo = document.querySelector('.promo');
const slides = document.querySelectorAll('.card__image');
swiper_core__WEBPACK_IMPORTED_MODULE_0__["Swiper"].use([swiper_core__WEBPACK_IMPORTED_MODULE_0__["Pagination"], swiper_core__WEBPACK_IMPORTED_MODULE_0__["Autoplay"], swiper_core__WEBPACK_IMPORTED_MODULE_0__["EffectFade"], swiper_core__WEBPACK_IMPORTED_MODULE_0__["Navigation"]]); // * Опции слайдеров

const promoSliderOptions = {
  slidesPerView: 1,
  slidesPerGroup: 1,
  a11y: true,
  initialSlide: 0,
  observer: true,
  updateOnWindowResize: true,
  loop: true,
  speed: 1000,
  autoplay: {
    delay: 3500,
    disableOnInteraction: false
  },
  effect: 'fade',
  fadeEffect: {
    crossFade: true
  }
};
const advantagesSliderOptions = {
  slidesPerView: 1,
  a11y: true,
  initialSlide: 0,
  observer: true,
  updateOnWindowResize: true,
  navigation: {
    nextEl: '.advantages__control-btn--next',
    prevEl: '.advantages__control-btn--prev'
  },
  runCallbacksOnInit: true,
  on: {
    init: function () {
      const sliderNumerationBar = document.querySelector('.advantages__slider-progress');
      sliderNumerationBar.innerHTML = '0' + (this.realIndex + 1);
    },
    slideChange: function () {
      const sliderNumerationBar = document.querySelector('.advantages__slider-progress');
      sliderNumerationBar.innerHTML = '0' + (this.realIndex + 1);
    }
  },
  loop: true,
  speed: 1000,
  autoplay: {
    delay: 4000,
    disableOnInteraction: false
  },
  effect: 'fade',
  fadeEffect: {
    crossFade: true
  }
};
const catalogSliderOptions = {
  a11y: true,
  initialSlide: 0,
  observer: true,
  updateOnWindowResize: true,
  navigation: {
    nextEl: '.slide-control--next',
    prevEl: '.slide-control--prev'
  },
  breakpoints: {
    0: {
      slidesPerView: 1
    },
    550: {
      slidesPerView: 2,
      slidesPerGroup: 2
    },
    768: {
      slidesPerView: 3,
      slidesPerGroup: 3
    }
  }
};
const cardSliderOptions = {
  slidesPerView: 1,
  a11y: true,
  initialSlide: 0,
  observer: true,
  updateOnWindowResize: true,
  navigation: {
    nextEl: '.card__control--next',
    prevEl: '.card__control--prev'
  },
  pagination: {
    el: '.card__pagination',
    clickable: true,
    renderBullet: function (index, className) {
      return "<button class=\"".concat(className, " card__bullet\"></button>");
    }
  }
}; // Функция создания изображений для пагинации

function renderPaginationImages(imgClass) {
  const bullets = document.querySelectorAll('.swiper-pagination-bullet');
  bullets.forEach((bullet, index) => {
    let bulletImage = slides[index].cloneNode(true);
    let pictureElement = document.createElement('picture');
    pictureElement.classList.add(imgClass);
    pictureElement.appendChild(bulletImage);
    bullet.appendChild(pictureElement);
  });
} // ! Инициализация слайдеров


const promoSlider = new swiper_core__WEBPACK_IMPORTED_MODULE_0__["Swiper"]('.swiper1', promoSliderOptions);
const advantagesSlider = new swiper_core__WEBPACK_IMPORTED_MODULE_0__["Swiper"]('.swiper2', advantagesSliderOptions);
const catalogSlider = new swiper_core__WEBPACK_IMPORTED_MODULE_0__["Swiper"]('.swiper3', catalogSliderOptions);
const cardSlider = new swiper_core__WEBPACK_IMPORTED_MODULE_0__["Swiper"]('.swiper4', cardSliderOptions); // ! Вычисление и задание высоты слайдеру блока "Promo"

if (promo) {
  let root = document.documentElement;
  let sliderHeight = '';

  function calcPromoSlider() {
    let headerHeight = document.querySelector('.page-header').getBoundingClientRect().height;
    let promoHeight = document.querySelector('.promo').getBoundingClientRect().height;
    let sliderHeight = headerHeight + promoHeight;
    root.style.setProperty('--sliderHeight', sliderHeight + 'px');
  }

  window.addEventListener('load', calcPromoSlider, false);
  window.addEventListener('resize', calcPromoSlider, false);
}

renderPaginationImages('card__bullet-media');
Object(_components_js_range_slider_js__WEBPACK_IMPORTED_MODULE_1__["createRangeSlider"])();

/***/ }),

/***/ "./source/js/main/utils.js":
/*!*********************************!*\
  !*** ./source/js/main/utils.js ***!
  \*********************************/
/*! exports provided: ESC_KEYCODE, ENTER_KEYCODE, disableWindowScroll, enableWindowScroll, breakpointChecker, onEscEvent, debounce, manageControls, setExpanded, createBtn, addActiveClass, removeActiveClass, turnOffListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESC_KEYCODE", function() { return ESC_KEYCODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER_KEYCODE", function() { return ENTER_KEYCODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableWindowScroll", function() { return disableWindowScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableWindowScroll", function() { return enableWindowScroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "breakpointChecker", function() { return breakpointChecker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onEscEvent", function() { return onEscEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "manageControls", function() { return manageControls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setExpanded", function() { return setExpanded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBtn", function() { return createBtn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addActiveClass", function() { return addActiveClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeActiveClass", function() { return removeActiveClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "turnOffListener", function() { return turnOffListener; });
const ENTER_KEYCODE = 13;
const ESC_KEYCODE = 27;
let winX = null,
    winY = null; // * Добавление активного класса элементу

const addActiveClass = (el, activeClass) => {
  if (!el.classList.contains(activeClass)) {
    el.classList.add(activeClass);
  }

  return el;
}; // * Удаление активного класса у элемента


const removeActiveClass = (el, activeClass) => {
  if (el.classList.contains(activeClass)) {
    el.classList.remove(activeClass);
  }

  return el;
}; // * Функция блокировки скролла


window.addEventListener('scroll', function () {
  if (winX !== null && winY !== null) {
    window.scrollTo(winX, winY);
  }
});

function disableWindowScroll() {
  winX = window.scrollX;
  winY = window.scrollY;
}

function enableWindowScroll() {
  winX = null;
  winY = null;
} // * Функция проверки медиа запросов


const breakpointChecker = function (media, enableCallback, disableCallback) {
  if (media.matches === true) {
    return enableCallback();
  } else if (media.matches === false) {
    return disableCallback();
  }
}; // * Функция обработки нажатия esc


const onEscEvent = function (evt, action) {
  if (evt.keyCode === ESC_KEYCODE) {
    action();
  }
}; // * Функция создания кнопки


const createBtn = btnClass => {
  let btn = document.createElement('button');
  btn.classList.add(btnClass);
  return btn;
}; // * Debounce


function debounce(func, wait, immediate) {
  let timeout;
  return function () {
    let context = this,
        args = arguments;

    let later = function () {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    let callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
} // * Функция отображения кнопок слайдера


const manageControls = (prevCssClass, nextCssClass, currentSlider, index, length) => {
  const prevBtn = document.querySelector(prevCssClass);
  const nextBtn = document.querySelector(nextCssClass);

  if (prevBtn && currentSlider && index > 0) {
    prevBtn.style.display = 'block';
    nextBtn.style.display = 'block';
  }

  if (prevBtn && currentSlider && index === 0) {
    prevBtn.style.display = 'none';
    nextBtn.style.display = 'block';
  }

  if (prevBtn && currentSlider && index === length - 1) {
    nextBtn.style.display = 'none';
  }
}; // * Функция изменения состояния aria-expanded


const setExpanded = el => {
  let isExpanded = el.getAttribute('aria-expanded') === 'true' || false;
  el.setAttribute('aria-expanded', !isExpanded);
  return el;
};

const turnOffListener = function (event, elem, callback, capture) {
  if (typeof elem === 'function') {
    capture = callback;
    callback = elem;
    elem = window;
  }

  capture = capture ? true : false;
  elem = typeof elem === 'string' ? document.querySelector(elem) : elem;
  if (!elem) return;
  elem.removeEventListener(event, callback, capture);
};



/***/ }),

/***/ 0:
/*!*********************************!*\
  !*** multi ./source/js/main.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./source/js/main.js */"./source/js/main.js");


/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map